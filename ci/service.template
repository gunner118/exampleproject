AWSTemplateFormatVersion: "2010-09-09"
Description: An eightball service.

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - stg
      - prd
      - isv
      - int

  ImageTag:
    Type: String
    Default: latest

  BranchName:
    Type: String
    Default: ''

  TestJob:
    Type: String
    Default: ''

  VpcName:
    Type: String
    Default: default
    Description: Define VPC targeted by deployment.

  SmokeTestJob:
    Type: String
    Default: ''

  Nonce:
    Type: String
    Default: ''

  ProjectName:
    Type: String
    Default: example-docker-flask

Conditions:
  MasterDeployment: !Equals [!Ref BranchName, "master"]

Resources:
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      RetentionInDays: 30

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
          # Note: Example services build off an unstable version of the sidecar container.
          # Stable version: !Sub 704685811864.dkr.ecr.${AWS::Region}.amazonaws.com/nginx-sidecar-selfsigned:latest
        - Name: nginx
          Essential: true
          Image: !Sub 704685811864.dkr.ecr.${AWS::Region}.amazonaws.com/nginx-sidecar-selfsigned:latest-develop
          Memory: 16
          PortMappings:
            - ContainerPort: 443
          Links:
            - app
        - Name: app
          Environment:
            - Name: ICIMS_CONFIG
              Value: !Sub |
                {
                  "PGHOST": "${PostgresDatabase.Endpoint}",
                  "PGDATABASE": "${PostgresDatabase.DatabaseName}",
                  "PGUSER": "${PostgresDatabase.RuntimeUser}",
                  "PGPASSWORD": "${RuntimePasswordSecret.Value}"
                }
            - Name: AWS_REGION
              Value: !Ref "AWS::Region"
            - Name: AWS_LOG_GROUP
              Value: !Ref CloudWatchLogsGroup
            - Name: CUSTOM_VARIABLE
              Value: "Some value"
          Essential: true
          Image: !Sub 704685811864.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}:${ImageTag}
          Memory: 256
          Cpu: 256
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region

  DefaultSecurityGroup:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Parameter: !Sub /${Environment}/vpc/${VpcName}/sg/default
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Environment}-cr-ssm-parameter

  PrivateSubnets:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Parameter: !Sub /${Environment}/vpc/${VpcName}/subnets/private
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Environment}-cr-ssm-parameter

  DatabasePassword:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Parameter: !Sub /${Environment}/rds/microservices/password
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Environment}-cr-ssm-parameter
      Nonce: !Ref Nonce

  DatabaseClusterName:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Parameter: !Sub /${Environment}/rds/microservices
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Environment}-cr-ssm-parameter

  VpcId:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Parameter: !Sub /${Environment}/vpc/${VpcName}/id
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Environment}-cr-ssm-parameter

  UpdaterPasswordSecret:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Environment}-cr-ssm-secret

  RuntimePasswordSecret:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Environment}-cr-ssm-secret

  PostgresDatabase:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Cluster: !GetAtt DatabaseClusterName.Value
      ClusterPassword: !GetAtt DatabasePassword.Value
      BogusParameter: this_is_a_bogus_value_test
      RuntimePassword: !GetAtt RuntimePasswordSecret.Value
      UpdaterPassword: !GetAtt UpdaterPasswordSecret.Value
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Environment}-cr-rds-postgres

  ECSDeployment:
    Type: AWS::CloudFormation::Stack
    Properties:
      # Note: Example services build off an unstable version of this template.
      # Stable version URL: https://s3.amazonaws.com/icims-artifacts-us-east-1/cfn/solutions/ecs-service.template
      TemplateURL: https://s3.amazonaws.com/icims-artifacts-us-east-1/cfn-develop/solutions/ecs-service.template
      Parameters:
        ServiceName: !Ref ProjectName
        Environment: !Ref Environment
        ServiceDns: !If
          - MasterDeployment
          - !Sub ${ProjectName}-${AWS::Region} # Qualify with AWS::Region un    til DNS is resolved for DR
          - !Sub ${ProjectName}-${BranchName}
        SumoLogicEnabled: "false"
        ExportParameters: !If
          - MasterDeployment
          - true
          - false
        Autoscale: "true"
        MinTasks: "2"
        MaxTasks: "4"
        TaskDefinition: !Ref TaskDefinition

  SubsystemTest:
    Type: AWS::CodeBuild::Project
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W32
            reason: If no EncryptionKey property is given, CodeBuild uses the default CMK for S3.
    Properties:
      Name: !Sub ${Environment}-${TestJob}
      Description: Test eightball application
      ServiceRole: !GetAtt ECSDeployment.Outputs.AcceptanceTestRole
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Sub 704685811864.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}:test
        ImagePullCredentialsType: SERVICE_ROLE
        EnvironmentVariables:
          - Name: HOST
            Value: !Sub https://${ECSDeployment.Outputs.ServiceEndpoint}
          - Name: VERSION
            Value: 1.0.45
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - cd /app && pytest test/subsystem.py
      VpcConfig:
        VpcId: !GetAtt VpcId.Value
        Subnets: !Split [ ',', !GetAtt PrivateSubnets.Value ]
        SecurityGroupIds:
          - !GetAtt DefaultSecurityGroup.Value

  SmokeTest:
    Type: AWS::CodeBuild::Project
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W32
            reason: If no EncryptionKey property is given, CodeBuild uses the default CMK for S3.
    Properties:
      Name: !Sub ${Environment}-${SmokeTestJob}
      Description: Test eightball application
      ServiceRole: !GetAtt ECSDeployment.Outputs.AcceptanceTestRole
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Sub 704685811864.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}:test
        ImagePullCredentialsType: SERVICE_ROLE
        EnvironmentVariables:
          - Name: HOST
            Value: !Sub https://${ECSDeployment.Outputs.ServiceEndpoint}
          - Name: VERSION
            Value: 1.0.45
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - cd /app && pytest test/smoke.py
      VpcConfig:
        VpcId: !GetAtt VpcId.Value
        Subnets: !Split [ ',', !GetAtt PrivateSubnets.Value ]
        SecurityGroupIds:
          - !GetAtt DefaultSecurityGroup.Value

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Dummy role for ECS task role assumption testing
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
